{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPNicyNbvfHdBAncGoTayFS"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Prime number generator and checker"],"metadata":{"id":"UsmBH4Jaf2GH"}},{"cell_type":"code","execution_count":9,"metadata":{"id":"8edCkslEfPfk","executionInfo":{"status":"ok","timestamp":1741668936342,"user_tz":-330,"elapsed":1,"user":{"displayName":"ALOK KUMAR MISHRA","userId":"11432318850471902474"}}},"outputs":[],"source":["# Prime number checker function\n","def is_prime(n):\n","    \"\"\"Returns True if n is a prime number, else False.\"\"\"\n","    if n <= 1:\n","        return False\n","    for i in range(2, int(n ** 0.5) + 1):  # check up to square root of n\n","        if n % i == 0:\n","            return False\n","    return True"]},{"cell_type":"code","source":["# Prime number generator function\n","def generate_primes(limit):\n","    \"\"\"Generates a list of prime numbers up to a given limit.\"\"\"\n","    primes = []\n","    for num in range(2, limit + 1):\n","        if is_prime(num):\n","            primes.append(num)\n","    return primes"],"metadata":{"id":"i5tpVS-3iC67","executionInfo":{"status":"ok","timestamp":1741668956712,"user_tz":-330,"elapsed":45,"user":{"displayName":"ALOK KUMAR MISHRA","userId":"11432318850471902474"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["# prompt: visulize it with graph\n","\n","import matplotlib.pyplot as plt\n","\n","# Prime number generator and checker (provided in the prompt)\n","def is_prime(n):\n","    \"\"\"Returns True if n is a prime number, else False.\"\"\"\n","    if n <= 1:\n","        return False\n","    for i in range(2, int(n ** 0.5) + 1):  # check up to square root of n\n","        if n % i == 0:\n","            return False\n","    return True\n","\n","def generate_primes(limit):\n","    \"\"\"Generates a list of prime numbers up to a given limit.\"\"\"\n","    primes = []\n","    for num in range(2, limit + 1):\n","        if is_prime(num):\n","            primes.append(num)\n","    return primes\n","\n","# Generate prime numbers up to a certain limit\n","limit = 100  # Example limit, adjust as needed\n","primes = generate_primes(limit)\n","\n","# Create the plot\n","plt.figure(figsize=(10, 6))\n","plt.plot(primes, 'bo')  # 'bo' creates blue dots\n","plt.xlabel('Index')\n","plt.ylabel('Prime Number')\n","plt.title('Prime Numbers up to {}'.format(limit))\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"kGpV3CebkO5F","executionInfo":{"status":"ok","timestamp":1741669085770,"user_tz":-330,"elapsed":887,"user":{"displayName":"ALOK KUMAR MISHRA","userId":"11432318850471902474"}},"outputId":"9a7d6f2a-33ff-4ea3-b0e5-e87a4b111a82"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Taking input from the user\n","try:\n","    num_to_check = int(input(\"Enter a number to check if it's prime: \"))\n","    if is_prime(num_to_check):\n","        print(f\"{num_to_check} is a prime number.\")\n","    else:\n","        print(f\"{num_to_check} is not a prime number.\")\n","\n","    limit = int(input(\"Enter the limit up to which you want to generate prime numbers: \"))\n","    primes_up_to_limit = generate_primes(limit)\n","    print(f\"Prime numbers up to {limit}: {primes_up_to_limit}\")\n","except ValueError:\n","    print(\"Please enter a valid integer.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jy_NofbPiKDn","executionInfo":{"status":"ok","timestamp":1741669034853,"user_tz":-330,"elapsed":12767,"user":{"displayName":"ALOK KUMAR MISHRA","userId":"11432318850471902474"}},"outputId":"baefc67c-a692-4c5b-bd5c-6fa3c53106da"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a number to check if it's prime: 45\n","45 is not a prime number.\n","Enter the limit up to which you want to generate prime numbers: 80\n","Prime numbers up to 80: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79]\n"]}]}]}